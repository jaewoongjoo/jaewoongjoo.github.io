temp<-0
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
T0<- solve(S%*%t(S))
t1<- T0%*%hatmu[j+1,]
t2<- 2*V
t3<- t(hatmu[j+1,])%*%T0
T4<- solve(2*M+w[kk]*T0)
t5<- (t(t2)+w[kk]*t3)%*%T4%*%T0%*%S
t6<- T0%*%T4%*%(t2+w[kk]*t1)
t7<- t3%*%S
T8<- 0.5*t6%*%t7
T9<- 0.5*t1%*%t5
temp<- temp+ T0%*%S-T0%*%solve(T0+(2/w[kk])*M)%*%T0%*%S-t1%*%t7-(t6%*%t5-2*(T8+T9))
}
return(temp)
}
#### Gradient Descent implementation
z_new <- (sigma +diag(c(0,0.1,0.1,0.1,0.1,-0.1)))
z_old <- (sigma -diag(c(0,0.01,0.01,0.01,0.01,-0.01)))
##define the alpha value (learning rate)
num <- 0
num_lim <- 100
epsilon <- 1e-10
learning_rate <- 0.01
while( norm(z_new-z_old) > epsilon){
#for(foriter in 1:num_lim){
num <- num + 1
z_old <- z_new
z_new <- z_old - learning_rate*Derivative(z_old)
#z_new <- z_old - learning_rate*matrix(gradient(Formula, z_old),p+1)
if( num > num_lim ){
break
}
}
hatsigma[j+1,,] <- z_new%*%t(z_new)
}
for(j in 1:(Niter-1)){
mu_temp1 <- array(0,c(p+1,p+1))
mu_temp2 <- rep(0,p+1)
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
mu_temp1 <- mu_temp1 + diag(rep(1,p+1))- (w[kk])*(solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(solve(hatsigma[j,,])))
mu_temp2 <- mu_temp2 + solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(2*V)
}
hatmu[j+1,] <- solve(mu_temp1)%*%mu_temp2
####Sigma
Formula <- function(S){
M <- array(0,c(p+1,p+1,k))
V <- array(0, c(p+1,k))
temp<-0
for(kk in 1:k){
M[,,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V[,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
temp <- temp + 0.5*log(det(S%*%t(S))) + 0.5*log(det( (2/w[kk])*M[,,kk] + solve(S%*%t(S)) ) ) + 0.5*t(hatmu[j+1,])%*%solve(S%*%t(S))%*%hatmu[j+1,]
temp <- temp - (0.5/w[kk])*t(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])%*%solve(2*M[,,kk]+w[kk]*solve(S%*%t(S)))%*%(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])
}
return(temp)
}
Derivative <- function(S) {
temp<-0
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
T0<- solve(S%*%t(S))
t1<- T0%*%hatmu[j+1,]
t2<- 2*V
t3<- t(hatmu[j+1,])%*%T0
T4<- solve(2*M+w[kk]*T0)
t5<- (t(t2)+w[kk]*t3)%*%T4%*%T0%*%S
t6<- T0%*%T4%*%(t2+w[kk]*t1)
t7<- t3%*%S
T8<- 0.5*t6%*%t7
T9<- 0.5*t1%*%t5
temp<- temp+ T0%*%S-T0%*%solve(T0+(2/w[kk])*M)%*%T0%*%S-t1%*%t7-(t6%*%t5-2*(T8+T9))
}
return(temp)
}
#### Gradient Descent implementation
z_new <- (sigma +diag(c(0,0.1,0.1,0.1,0.1,-0.1)))
z_old <- (sigma -diag(c(0,0.01,0.01,0.01,0.01,-0.01)))
##define the alpha value (learning rate)
num <- 0
num_lim <- 100
epsilon <- 1e-10
learning_rate <- 0.001
while( norm(z_new-z_old) > epsilon){
#for(foriter in 1:num_lim){
num <- num + 1
z_old <- z_new
z_new <- z_old - learning_rate*Derivative(z_old)
#z_new <- z_old - learning_rate*matrix(gradient(Formula, z_old),p+1)
if( num > num_lim ){
break
}
}
hatsigma[j+1,,] <- z_new%*%t(z_new)
}
par(mfrow=c(2,5))
plot(hatmu[,2], type='l', main=expression(mu[1]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[2],col="red", lty=2, lwd=1)
plot(hatmu[,3], type='l', main=expression(mu[2]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[3],col="red", lty=2, lwd=1)
plot(hatmu[,4], type='l', main=expression(mu[3]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[4],col="red", lty=2, lwd=1)
plot(hatmu[,5], type='l', main=expression(mu[4]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[5],col="red", lty=2, lwd=1)
plot(hatmu[,6], type='l', main=expression(mu[5]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[6],col="red", lty=2, lwd=1)
plot(log(hatsigma[,2,2]), type='l', main=expression(log(sigma[1]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[2,2]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,3,3]), type='l', main=expression(log(sigma[2]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[3,3]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,4,4]), type='l', main=expression(log(sigma[3]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[4,4]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,5,5]), type='l', main=expression(log(sigma[4]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[5,5]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,6,6]), type='l', main=expression(log(sigma[5]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[6,6]),col="red", lty=2, lwd=1)
hatmu[j+1,]
hatmu[j+1,]
j
# k: # study centers, p=2, linear regression setting
k <- 5
Nsim <- 100 # Number of simulation
Niter <- 500
N <- 200 #sample size
p <- 5
num_ref <- 100 #number of samples in each study
#population parameter(mu,sigma): beta~N(mu, sigma)
mu <- c(0,1,20,-7,40,3);
sigma <- matrix(c(0.1, 0, 0, 0, 0, 0,
0, 1, 0.1, 0.1, 0.1, 0.1,
0, 0.1, 1, 0.1, 0.1, 0.1,
0, 0.1, 0.1, 1, 0.1, 0.1,
0, 0.1, 0.1, 0.1, 1, 0.1,
0, 0.1, 0.1, 0.1, 0.1, 1
),nrow=6)
# Fitted parameters (stacking data for every iteration)
hatmu <- array(0,c(Niter,p+1))
hatsigma <- array(0,c(Niter,p+1,p+1))
lastmu <- array(0,c(Nsim,p+1))
lastsigma <- array(0,c(Nsim,p+1,p+1))
# mu_x, sigma_x for generating reference covariates of X
mu_x <- c(0,0,0,0,0)
sigma2_x<- matrix(c(1,0.01,0.01,0.01,0.01,
0.01,1,0.01,0.01,0.01,
0.01,0.01,1,0.01,0.01,
0.01,0.01,0.01,1,0.01,
0.01,0.01,0.01,0.01,1
),nrow=5)
bet<- array(0,c(Nsim,k,p+1))
#theta <- array(0, c(Nsim,k,p+1))
theta <- array(0, c(Nsim,k,3))
#initials
x_ref_full <- array(0, c(num_ref,p+1,k))
x_ref_red <- array(0, c(num_ref,3,k))
x_ref <- array(0, c(N,p+1,k))
x<- array(0,c(N,3,k)) #reduced covariate
y<- array(0,c(num_ref,k))
sigma2_y <- diag(1,num_ref,num_ref)
w <- rep(0,k)
chs<- cbind(c(2,3),c(2,4),c(4,0),c(5,0),c(6,0))
for(kk in 1:k){
x_ref_full[,,kk] <- cbind(1,MASS::mvrnorm(n=num_ref, mu=mu_x, Sigma=sigma2_x)) #N -> num_ref, reduce step.
x_ref_red[,1:(3-sum(chs[,kk]==0)),kk] <- cbind(1,x_ref_full[,chs[,kk],kk]) #cbind(1,x_ref_full[,kk+1,kk])
y[,kk] <- MASS::mvrnorm(n=1,mu=x_ref_full[,,kk]%*%bet[i,kk,], Sigma=sigma2_y)
w[kk] <- det(t(x_ref_red[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref_red[,1:(3-sum(chs[,kk]==0)),kk])
theta[i,kk,1:(3-sum(chs[,kk]==0))] <- solve(t(x_ref_red[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref_red[,1:(3-sum(chs[,kk]==0)),kk])%*%t(x_ref_red[,1:(3-sum(chs[,kk]==0)),kk])%*%y[,kk]
x_ref[,,kk] <- cbind(1,MASS::mvrnorm(n=N, mu=mu_x, Sigma=sigma2_x))
x[,1:(3-sum(chs[,kk]==0)),kk]<- cbind(1,x_ref[,chs[,kk],kk]) #remove sam_vec
}
hatmu[1,]<- mu-c(0.1,-0.1,0.1,0.1,-0.1,0.1)
hatsigma[1,,]<- sigma
for(j in 1:(Niter-1)){
mu_temp1 <- array(0,c(p+1,p+1))
mu_temp2 <- rep(0,p+1)
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
mu_temp1 <- mu_temp1 + diag(rep(1,p+1))- (w[kk])*(solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(solve(hatsigma[j,,])))
mu_temp2 <- mu_temp2 + solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(2*V)
}
hatmu[j+1,] <- solve(mu_temp1)%*%mu_temp2
####Sigma
Formula <- function(S){
M <- array(0,c(p+1,p+1,k))
V <- array(0, c(p+1,k))
temp<-0
for(kk in 1:k){
M[,,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V[,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
temp <- temp + 0.5*log(det(S%*%t(S))) + 0.5*log(det( (2/w[kk])*M[,,kk] + solve(S%*%t(S)) ) ) + 0.5*t(hatmu[j+1,])%*%solve(S%*%t(S))%*%hatmu[j+1,]
temp <- temp - (0.5/w[kk])*t(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])%*%solve(2*M[,,kk]+w[kk]*solve(S%*%t(S)))%*%(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])
}
return(temp)
}
Derivative <- function(S) {
temp<-0
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
T0<- solve(S%*%t(S))
t1<- T0%*%hatmu[j+1,]
t2<- 2*V
t3<- t(hatmu[j+1,])%*%T0
T4<- solve(2*M+w[kk]*T0)
t5<- (t(t2)+w[kk]*t3)%*%T4%*%T0%*%S
t6<- T0%*%T4%*%(t2+w[kk]*t1)
t7<- t3%*%S
T8<- 0.5*t6%*%t7
T9<- 0.5*t1%*%t5
temp<- temp+ T0%*%S-T0%*%solve(T0+(2/w[kk])*M)%*%T0%*%S-t1%*%t7-(t6%*%t5-2*(T8+T9))
}
return(temp)
}
#### Gradient Descent implementation
z_new <- (sigma +diag(c(0,0.1,0.1,0.1,0.1,-0.1)))
z_old <- (sigma -diag(c(0,0.01,0.01,0.01,0.01,-0.01)))
##define the alpha value (learning rate)
num <- 0
num_lim <- 100
epsilon <- 1e-10
learning_rate <- 0.001
while( norm(z_new-z_old) > epsilon){
#for(foriter in 1:num_lim){
num <- num + 1
z_old <- z_new
z_new <- z_old - learning_rate*Derivative(z_old)
#z_new <- z_old - learning_rate*matrix(gradient(Formula, z_old),p+1)
if( num > num_lim ){
break
}
}
hatsigma[j+1,,] <- z_new%*%t(z_new)
}
par(mfrow=c(2,5))
plot(hatmu[,2], type='l', main=expression(mu[1]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[2],col="red", lty=2, lwd=1)
plot(hatmu[,3], type='l', main=expression(mu[2]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[3],col="red", lty=2, lwd=1)
plot(hatmu[,4], type='l', main=expression(mu[3]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[4],col="red", lty=2, lwd=1)
plot(hatmu[,5], type='l', main=expression(mu[4]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[5],col="red", lty=2, lwd=1)
plot(hatmu[,6], type='l', main=expression(mu[5]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[6],col="red", lty=2, lwd=1)
plot(log(hatsigma[,2,2]), type='l', main=expression(log(sigma[1]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[2,2]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,3,3]), type='l', main=expression(log(sigma[2]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[3,3]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,4,4]), type='l', main=expression(log(sigma[3]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[4,4]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,5,5]), type='l', main=expression(log(sigma[4]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[5,5]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,6,6]), type='l', main=expression(log(sigma[5]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[6,6]),col="red", lty=2, lwd=1)
hatmu[,2]
hatmu[,3]
hatmu[,4]
hatmu[,5]
for(j in 1:(Niter-1)){
mu_temp1 <- array(0,c(p+1,p+1))
mu_temp2 <- rep(0,p+1)
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
mu_temp1 <- mu_temp1 + diag(rep(1,p+1))- (w[kk])*(solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(solve(hatsigma[j,,])))
mu_temp2 <- mu_temp2 + solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(2*V)
}
hatmu[j+1,] <- solve(mu_temp1)%*%mu_temp2
####Sigma
Formula <- function(S){
M <- array(0,c(p+1,p+1,k))
V <- array(0, c(p+1,k))
temp<-0
for(kk in 1:k){
M[,,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V[,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
temp <- temp + 0.5*log(det(S%*%t(S))) + 0.5*log(det( (2/w[kk])*M[,,kk] + solve(S%*%t(S)) ) ) + 0.5*t(hatmu[j+1,])%*%solve(S%*%t(S))%*%hatmu[j+1,]
temp <- temp - (0.5/w[kk])*t(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])%*%solve(2*M[,,kk]+w[kk]*solve(S%*%t(S)))%*%(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])
}
return(temp)
}
Derivative <- function(S) {
temp<-0
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
T0<- solve(S%*%t(S))
t1<- T0%*%hatmu[j+1,]
t2<- 2*V
t3<- t(hatmu[j+1,])%*%T0
T4<- solve(2*M+w[kk]*T0)
t5<- (t(t2)+w[kk]*t3)%*%T4%*%T0%*%S
t6<- T0%*%T4%*%(t2+w[kk]*t1)
t7<- t3%*%S
T8<- 0.5*t6%*%t7
T9<- 0.5*t1%*%t5
temp<- temp+ T0%*%S-T0%*%solve(T0+(2/w[kk])*M)%*%T0%*%S-t1%*%t7-(t6%*%t5-2*(T8+T9))
}
return(temp)
}
#### Gradient Descent implementation
z_new <- (sigma +diag(c(0,0.1,0.1,0.1,0.1,-0.1)))
z_old <- (sigma -diag(c(0,0.01,0.01,0.01,0.01,-0.01)))
##define the alpha value (learning rate)
num <- 0
num_lim <- 100
epsilon <- 1e-10
learning_rate <- 0.01
while( norm(z_new-z_old) > epsilon){
#for(foriter in 1:num_lim){
num <- num + 1
z_old <- z_new
z_new <- z_old - learning_rate*Derivative(z_old)
#z_new <- z_old - learning_rate*matrix(gradient(Formula, z_old),p+1)
if( num > num_lim ){
break
}
}
hatsigma[j+1,,] <- z_new%*%t(z_new)
}
par(mfrow=c(2,5))
plot(hatmu[,2], type='l', main=expression(mu[1]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[2],col="red", lty=2, lwd=1)
plot(hatmu[,3], type='l', main=expression(mu[2]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[3],col="red", lty=2, lwd=1)
plot(hatmu[,4], type='l', main=expression(mu[3]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[4],col="red", lty=2, lwd=1)
plot(hatmu[,5], type='l', main=expression(mu[4]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[5],col="red", lty=2, lwd=1)
plot(hatmu[,6], type='l', main=expression(mu[5]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[6],col="red", lty=2, lwd=1)
plot(log(hatsigma[,2,2]), type='l', main=expression(log(sigma[1]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[2,2]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,3,3]), type='l', main=expression(log(sigma[2]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[3,3]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,4,4]), type='l', main=expression(log(sigma[3]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[4,4]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,5,5]), type='l', main=expression(log(sigma[4]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[5,5]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,6,6]), type='l', main=expression(log(sigma[5]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[6,6]),col="red", lty=2, lwd=1)
for(j in 1:(Niter-1)){
mu_temp1 <- array(0,c(p+1,p+1))
mu_temp2 <- rep(0,p+1)
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
mu_temp1 <- mu_temp1 + diag(rep(1,p+1))- (w[kk])*(solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(solve(hatsigma[j,,])))
mu_temp2 <- mu_temp2 + solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(2*V)
}
hatmu[j+1,] <- solve(mu_temp1)%*%mu_temp2
####Sigma
Formula <- function(S){
M <- array(0,c(p+1,p+1,k))
V <- array(0, c(p+1,k))
temp<-0
for(kk in 1:k){
M[,,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V[,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
temp <- temp + 0.5*log(det(S%*%t(S))) + 0.5*log(det( (2/w[kk])*M[,,kk] + solve(S%*%t(S)) ) ) + 0.5*t(hatmu[j+1,])%*%solve(S%*%t(S))%*%hatmu[j+1,]
temp <- temp - (0.5/w[kk])*t(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])%*%solve(2*M[,,kk]+w[kk]*solve(S%*%t(S)))%*%(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])
}
return(temp)
}
Derivative <- function(S) {
temp<-0
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
T0<- solve(S%*%t(S))
t1<- T0%*%hatmu[j+1,]
t2<- 2*V
t3<- t(hatmu[j+1,])%*%T0
T4<- solve(2*M+w[kk]*T0)
t5<- (t(t2)+w[kk]*t3)%*%T4%*%T0%*%S
t6<- T0%*%T4%*%(t2+w[kk]*t1)
t7<- t3%*%S
T8<- 0.5*t6%*%t7
T9<- 0.5*t1%*%t5
temp<- temp+ T0%*%S-T0%*%solve(T0+(2/w[kk])*M)%*%T0%*%S-t1%*%t7-(t6%*%t5-2*(T8+T9))
}
return(temp)
}
#### Gradient Descent implementation
z_new <- (sigma +diag(c(0,0.1,0.1,0.1,0.1,-0.1)))
z_old <- (sigma -diag(c(0,0.01,0.01,0.01,0.01,-0.01)))
##define the alpha value (learning rate)
num <- 0
num_lim <- 100
epsilon <- 1e-10
learning_rate <- 0.005
while( norm(z_new-z_old) > epsilon){
#for(foriter in 1:num_lim){
num <- num + 1
z_old <- z_new
z_new <- z_old - learning_rate*Derivative(z_old)
#z_new <- z_old - learning_rate*matrix(gradient(Formula, z_old),p+1)
if( num > num_lim ){
break
}
}
hatsigma[j+1,,] <- z_new%*%t(z_new)
}
par(mfrow=c(2,5))
plot(hatmu[,2], type='l', main=expression(mu[1]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[2],col="red", lty=2, lwd=1)
plot(hatmu[,3], type='l', main=expression(mu[2]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[3],col="red", lty=2, lwd=1)
plot(hatmu[,4], type='l', main=expression(mu[3]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[4],col="red", lty=2, lwd=1)
plot(hatmu[,5], type='l', main=expression(mu[4]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[5],col="red", lty=2, lwd=1)
plot(hatmu[,6], type='l', main=expression(mu[5]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[6],col="red", lty=2, lwd=1)
plot(log(hatsigma[,2,2]), type='l', main=expression(log(sigma[1]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[2,2]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,3,3]), type='l', main=expression(log(sigma[2]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[3,3]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,4,4]), type='l', main=expression(log(sigma[3]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[4,4]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,5,5]), type='l', main=expression(log(sigma[4]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[5,5]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,6,6]), type='l', main=expression(log(sigma[5]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[6,6]),col="red", lty=2, lwd=1)
for(j in 1:(Niter-1)){
mu_temp1 <- array(0,c(p+1,p+1))
mu_temp2 <- rep(0,p+1)
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
mu_temp1 <- mu_temp1 + diag(rep(1,p+1))- (w[kk])*(solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(solve(hatsigma[j,,])))
mu_temp2 <- mu_temp2 + solve(2*M+ w[kk]*solve(hatsigma[j,,]))%*%(2*V)
}
hatmu[j+1,] <- solve(mu_temp1)%*%mu_temp2
####Sigma
Formula <- function(S){
M <- array(0,c(p+1,p+1,k))
V <- array(0, c(p+1,k))
temp<-0
for(kk in 1:k){
M[,,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V[,kk] <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
temp <- temp + 0.5*log(det(S%*%t(S))) + 0.5*log(det( (2/w[kk])*M[,,kk] + solve(S%*%t(S)) ) ) + 0.5*t(hatmu[j+1,])%*%solve(S%*%t(S))%*%hatmu[j+1,]
temp <- temp - (0.5/w[kk])*t(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])%*%solve(2*M[,,kk]+w[kk]*solve(S%*%t(S)))%*%(2*V[,kk]+w[kk]*solve(S%*%t(S))%*%hatmu[j+1,])
}
return(temp)
}
Derivative <- function(S) {
temp<-0
for(kk in 1:k){
M <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x_ref[,,kk]
V <- t(x_ref[,,kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%t(x[,1:(3-sum(chs[,kk]==0)),kk])%*%x[,1:(3-sum(chs[,kk]==0)),kk]%*%theta[i,kk,1:(3-sum(chs[,kk]==0))]
T0<- solve(S%*%t(S))
t1<- T0%*%hatmu[j+1,]
t2<- 2*V
t3<- t(hatmu[j+1,])%*%T0
T4<- solve(2*M+w[kk]*T0)
t5<- (t(t2)+w[kk]*t3)%*%T4%*%T0%*%S
t6<- T0%*%T4%*%(t2+w[kk]*t1)
t7<- t3%*%S
T8<- 0.5*t6%*%t7
T9<- 0.5*t1%*%t5
temp<- temp+ T0%*%S-T0%*%solve(T0+(2/w[kk])*M)%*%T0%*%S-t1%*%t7-(t6%*%t5-2*(T8+T9))
}
return(temp)
}
#### Gradient Descent implementation
z_new <- (sigma +diag(c(0,0.1,0.1,0.1,0.1,-0.1)))
z_old <- (sigma -diag(c(0,0.01,0.01,0.01,0.01,-0.01)))
##define the alpha value (learning rate)
num <- 0
num_lim <- 500
epsilon <- 1e-3
learning_rate <- 0.001
while( norm(z_new-z_old) > epsilon){
#for(foriter in 1:num_lim){
num <- num + 1
z_old <- z_new
z_new <- z_old - learning_rate*Derivative(z_old)
#z_new <- z_old - learning_rate*matrix(gradient(Formula, z_old),p+1)
if( num > num_lim ){
break
}
}
hatsigma[j+1,,] <- z_new%*%t(z_new)
}
par(mfrow=c(2,5))
plot(hatmu[,2], type='l', main=expression(mu[1]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[2],col="red", lty=2, lwd=1)
plot(hatmu[,3], type='l', main=expression(mu[2]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[3],col="red", lty=2, lwd=1)
plot(hatmu[,4], type='l', main=expression(mu[3]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[4],col="red", lty=2, lwd=1)
plot(hatmu[,5], type='l', main=expression(mu[4]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[5],col="red", lty=2, lwd=1)
plot(hatmu[,6], type='l', main=expression(mu[5]), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=mu[6],col="red", lty=2, lwd=1)
plot(log(hatsigma[,2,2]), type='l', main=expression(log(sigma[1]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[2,2]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,3,3]), type='l', main=expression(log(sigma[2]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[3,3]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,4,4]), type='l', main=expression(log(sigma[3]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[4,4]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,5,5]), type='l', main=expression(log(sigma[4]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[5,5]),col="red", lty=2, lwd=1)
plot(log(hatsigma[,6,6]), type='l', main=expression(log(sigma[5]^2)), xlab="Iteration", ylab="Value", cex.main=1.5)
abline(h=log(sigma[6,6]),col="red", lty=2, lwd=1)
